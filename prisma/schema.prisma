generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Model for user accounts, handling authentication providers
model Account {
  id                       String   @id @default(cuid())
  userId                   String   @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?    @relation(fields: [userId], references: [id])
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Model for user sessions, managing active sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

// Central User model, linked to roles like generator, collector, or recycling center
model User {
  id                   String             @id @default(cuid())
  name                 String?
  email                String?            @unique
  username             String?            @unique
  emailVerified        DateTime?
  phone                String?            @unique
  password             String // Store hashed passwords
  role                 String? // e.g., "generator", "collector", "recycling_center"
  onboardingCompleted  Boolean            @default(false)
  image                String?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  accounts             Account[]
  sessions             Session[]
  Authenticator        Authenticator[]
  Generator            Generator?
  Collector            Collector?
  RecyclingCenter      RecyclingCenter?
  paidTransactions     MpesaTransaction[] @relation("Payer")
  receivedTransactions MpesaTransaction[] @relation("Payee")
  licenses             License[]
  vehicles             Vehicle[]
  trackingDocuments    TrackingDocument[]
  profile              Profile?
  notifications        Notification[]
}

// Model for email verification tokens
model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Model for WebAuthn authenticators (optional)
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Model for waste generators (e.g., households, businesses)
model Generator {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  address   String
  status    String   @default("Active") // Added for Active/Inactive
  collectionRequests CollectionRequest[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model for waste collectors
model Collector {
  id                 String              @id @default(cuid())
  userId             String              @unique
  user               User                @relation(fields: [userId], references: [id])
  capacity           Int
  vehicle            String
  collectionRequests CollectionRequest[]
  wasteTransactions  WasteTransaction[]
}

// Model for recycling centers
model RecyclingCenter {
  id                 String             @id @default(cuid())
  userId             String             @unique
  user               User               @relation(fields: [userId], references: [id])
  location           String
  acceptedWasteTypes WasteType[]        @relation("AcceptedWasteTypes")
  wasteTransactions  WasteTransaction[]
}

// Model for waste types
model WasteType {
  id               String            @id @default(cuid())
  name             String            @unique
  recyclingCenters RecyclingCenter[] @relation("AcceptedWasteTypes")
}

// Model for waste collection requests
model CollectionRequest {
  id            String   @id @default(cuid())
  generatorId   String
  generator     Generator @relation(fields: [generatorId], references: [id])
  wasteType     String
  amount        Float
  requestedTime DateTime
  status        String   // e.g., "Active", "Inactive", "pending", "accepted", "collected"
  collectorId   String?
  collector     Collector? @relation(fields: [collectorId], references: [id])
  title         String?  // Added for event title
  location      String?  // Added for event location
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  wasteTransactions WasteTransaction[]
  mpesaTransactions MpesaTransaction[]
}

// Model for waste transactions (collection and delivery)
model WasteTransaction {
  id                  String            @id @default(cuid())
  collectionRequestId String
  collectionRequest   CollectionRequest @relation(fields: [collectionRequestId], references: [id])
  collectorId         String
  collector           Collector         @relation(fields: [collectorId], references: [id])
  recyclingCenterId   String
  recyclingCenter     RecyclingCenter   @relation(fields: [recyclingCenterId], references: [id])
  wasteType           String
  amount              Float
  collectionTime      DateTime
  deliveryTime        DateTime?
  status              String
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
}

// Model for waste reports (for compliance with NEEMA waste standards)
model WasteReport {
  id               String   @id @default(cuid())
  periodStart      DateTime
  periodEnd        DateTime
  totalWaste       Float
  wasteByType      Json
  complianceStatus String
  generatedAt      DateTime @default(now())
}

// Model for MPESA transactions, handling payments for collection services
model MpesaTransaction {
  id                  String   @id @default(cuid())
  mpesaTransactionId  String   @unique
  amount              Float
  phoneNumber         String
  transactionDate     DateTime
  status              String   // e.g., "Pending", "Completed", "Failed"
  collectionRequestId String
  collectionRequest   CollectionRequest @relation(fields: [collectionRequestId], references: [id])
  payerId             String
  payeeId             String
  payer               User     @relation("Payer", fields: [payerId], references: [id])
  payee               User     @relation("Payee", fields: [payeeId], references: [id])
  checkoutRequestId   String?  @unique // Added for M-Pesa STK Push
  mpesaReceiptNumber  String?  // Added for M-Pesa receipt
  resultCode          Int?     // Added for callback result code
  resultDesc          String?  // Added for callback result description
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}
// New model for licenses
model License {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  licenseNumber String
  issuingDate   DateTime?
  expiryDate    DateTime?
  licenseType   String
  filePath      String?
  status        String    @default("pending")
  adminNotes    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt  
}

// New model for vehicles
model Vehicle {
  id                 String             @id @default(cuid())
  userId             String
  user               User               @relation(fields: [userId], references: [id])
  registrationNumber String
  vehicleType        String
  capacity           String?
  labelPhotoPath     String?
  sealingPhotoPath   String?
  approvedRoutes     String
  status             String             @default("pending")
  adminNotes         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  trackingDocuments  TrackingDocument[]
}

// New model for tracking documents
model TrackingDocument {
  id               String   @id @default(cuid())
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  vehicleId        String?
  vehicle          Vehicle? @relation(fields: [vehicleId], references: [id])
  wasteType        String
  quantity         Float
  containerCount   Int
  collectionPoint  String
  disposalPoint    String
  collectionDate   DateTime
  status           String   @default("active")
  verificationCode String?
  digitalSignature String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// New model for user profiles (for onboarding status)
model Profile {
  id                  String   @id @default(cuid())
  userId              String   @unique
  user                User     @relation(fields: [userId], references: [id])
  onboardingStep      String?
  onboardingCompleted Boolean  @default(false)
  role                String? // Mirrors User.role for consistency
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

}
// New model for notification templates
model NotificationTemplate {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   // e.g., "reminder", "alert"
  lastSent    DateTime? // Changed from last_sent
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  notifications Notification[] // Link to notifications using this template
  
}

// New model for notifications (history)
model Notification {
  id            String   @id @default(cuid())
  title         String
  recipients    String   // e.g., comma-separated user IDs or emails
  type          String   // e.g., "reminder", "alert"
  channel       String   // e.g., "sms", "email"
  date          DateTime // Changed from string to DateTime
  status        String   // e.g., "Pending", "Sent", "Failed"
  deliveryRate  String   // e.g., "75%"
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  templateId    String?
  template      NotificationTemplate? @relation(fields: [templateId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model ApiKey {
  id                 String    @id @default(cuid())
  provider           String    @unique
  consumer_key       String
  consumer_secret    String
  initiator_name     String
  security_credential String
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
}